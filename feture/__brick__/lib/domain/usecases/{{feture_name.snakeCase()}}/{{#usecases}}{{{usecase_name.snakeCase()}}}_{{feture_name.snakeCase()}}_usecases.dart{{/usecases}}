part of '{{feture_name.snakeCase()}}_usecases.dart';

class {{usecases.usecase_name.pascalCase()}}{{feture_name.pascalCase()}}Usecase extends UseCase<{{usecases.return}}, {{#usecases.has_params}}{{usecases.usecase_name.pascalCase()}}{{feture_name.pascalCase()}}Params{{/usecases.has_params}}{{^usecases.has_params}}NoParams{{/usecases.has_params}}> {
  final {{feture_name.pascalCase()}}Repository repository;

  {{usecases.usecase_name.pascalCase()}}{{feture_name.pascalCase()}}Usecase({required this.repository});

  @override
  {{#usecases.stream}}Stream<{{usecases.return}}>{{/usecases.stream}}{{^usecases.stream}}Future<Either<Failure, {{usecases.return}}>>{{/usecases.stream}} call({{#usecases.has_params}}{{usecases.usecase_name.pascalCase()}}{{feture_name.pascalCase()}}Params{{/usecases.has_params}}{{^usecases.has_params}}NoParams{{/usecases.has_params}} params) async {
    return await repository.{{usecases.usecase_name.camelCase()}}{{feture_name.pascalCase()}}({{#usecases.has_params}}params{{/usecases.has_params}});
  }
}
{{#usecases.has_params}}
class {{usecases.usecase_name.pascalCase()}}{{feture_name.pascalCase()}}Params extends Equatable {
  {{#usecases.params}}final {{param_type}} {{param_name}};
  {{/usecases.params}}
  const {{usecases.usecase_name.pascalCase()}}{{feture_name.pascalCase()}}Params({
    {{#usecases.params}}required this.{{param_name}},
    {{/usecases.params}}
    }) : super();

  @override
  List<Object> get props => [
    {{#usecases.params}}{{param_name}},
    {{/usecases.params}}];
}
{{/usecases.has_params}}
